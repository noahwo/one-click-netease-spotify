import { ChatMistralAI } from '@langchain/mistralai';
import { ChatOpenAI } from '@langchain/openai';
import { ChatGroq } from '@langchain/groq';
import { PROVIDER_LIST } from '../utils/contants.js';
let model;
export function initializeModel({ modelProvider, modelName, temperature = 0, apiKey }) {
    if (!apiKey)
        throw new Error('Missing apiKey');
    switch (modelProvider) {
        case 'openAI':
            model = new ChatOpenAI({
                openAIApiKey: apiKey,
                modelName,
                temperature
            });
            break;
        case 'mistral':
            model = new ChatMistralAI({
                apiKey,
                modelName,
                temperature
            });
            break;
        case 'groq':
            model = new ChatGroq({
                apiKey,
                modelName,
                temperature
            });
            break;
        default:
            throw new Error(`Only ${PROVIDER_LIST.join(', ')} llm are supported. Please choose one`);
    }
    return model;
}
export function getModel() {
    if (!model) {
        throw new Error('Model has not been initialized yet');
    }
    return model;
}
export function _resetForTests() {
    model = undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGxtL21vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUVwRCxJQUFJLEtBQXdELENBQUE7QUFJNUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxFQUM5QixhQUFhLEVBQ2IsU0FBUyxFQUNULFdBQVcsR0FBRyxDQUFDLEVBQ2YsTUFBTSxFQUNQO0lBQ0MsSUFBSSxDQUFDLE1BQU07UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFFOUMsUUFBUSxhQUFhLEVBQUU7UUFDckIsS0FBSyxRQUFRO1lBQ1gsS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDO2dCQUNyQixZQUFZLEVBQUUsTUFBTTtnQkFDcEIsU0FBUztnQkFDVCxXQUFXO2FBQ1osQ0FBQyxDQUFBO1lBQ0YsTUFBSztRQUNQLEtBQUssU0FBUztZQUNaLEtBQUssR0FBRyxJQUFJLGFBQWEsQ0FBQztnQkFDeEIsTUFBTTtnQkFDTixTQUFTO2dCQUNULFdBQVc7YUFDWixDQUFDLENBQUE7WUFDRixNQUFLO1FBQ1AsS0FBSyxNQUFNO1lBQ1QsS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDO2dCQUNuQixNQUFNO2dCQUNOLFNBQVM7Z0JBQ1QsV0FBVzthQUNaLENBQUMsQ0FBQTtZQUNGLE1BQUs7UUFDUDtZQUNFLE1BQU0sSUFBSSxLQUFLLENBQ2IsUUFBUSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsQ0FDeEUsQ0FBQTtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVE7SUFDdEIsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQTtLQUN0RDtJQUNELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjO0lBQzVCLEtBQUssR0FBRyxTQUFTLENBQUE7QUFDbkIsQ0FBQyJ9