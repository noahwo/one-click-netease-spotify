import path from 'path';
import { addCommentsPerFile } from './add-comment/index.js';
import { generateMarkdownFromCommentedCode } from './generate-doc/index.js';
import { getHandlerPaths } from './plugins/serverless/index.js';
import { initializeModel } from './llm/model.js';
import { writeMarkdownFile } from './generate-doc/write-markdown.js';
import { PROVIDER_LIST } from './utils/contants.js';
function checkRequiredFields(config) {
    if (!config.outputDir) {
        throw new Error('An outpath directory is required. Please fill outputDir');
    }
    if (!config.llm?.apiKey) {
        throw new Error('An API KEY is required. Please fill llm.apiKey');
    }
    if (!PROVIDER_LIST.includes(config.llm?.modelProvider)) {
        throw new Error(`Only ${PROVIDER_LIST.join(', ')} llm are supported. Please choose one`);
    }
    if (!config.llm?.modelName) {
        throw new Error('A modelName is required. Please fill llm.modelName');
    }
    if (!config.entryPoint &&
        !config.serverlessEntryPoint &&
        !config.files?.length) {
        throw new Error('You have to pass an entryPoint or a serverlessEntryPoint or an array of files');
    }
}
export async function docai(configArgs) {
    checkRequiredFields(configArgs);
    initializeModel(configArgs.llm);
    const config = {
        ...configArgs,
        ...{
            isMocked: Boolean(configArgs.isMocked),
            tmpFolderPath: configArgs.tmpFolderPath ?? '',
            deleteTmpFolder: Boolean(configArgs.deleteTmpFolder),
            outputDir: path.resolve(process.cwd(), configArgs.outputDir),
            baseDir: configArgs.baseDir
                ? path.resolve(configArgs.baseDir)
                : process.cwd()
        }
    };
    console.log('Generating your documentation...');
    if (config.files?.length) {
        try {
            await Promise.all(config.files
                .map((file) => path.resolve(file))
                .map(async (file) => {
                await writeMarkdownFile(path.dirname(file), config)(file);
            }));
            console.log('Documentation generated to', config.outputDir);
            return;
        }
        catch (err) {
            console.error('Error into files', err);
            throw new Error(`Error into generation:  ${err}`);
        }
    }
    const handlerPaths = config.entryPoint
        ? [path.resolve(config.entryPoint)]
        : getHandlerPaths(path.resolve(config.serverlessEntryPoint), config.baseDir);
    const directoryToCommentedFiles = (await Promise.all(handlerPaths.map(async (entryHandler) => await addCommentsPerFile(entryHandler, config))))[0];
    await generateMarkdownFromCommentedCode(directoryToCommentedFiles, config);
}
export default docai;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQzNELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQzNFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFFaEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBRW5ELFNBQVMsbUJBQW1CLENBQUMsTUFBd0I7SUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFBO0tBQzNFO0lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQTtLQUNsRTtJQUVELElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLEVBQUU7UUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FDYixRQUFRLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUN4RSxDQUFBO0tBQ0Y7SUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7UUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFBO0tBQ3RFO0lBRUQsSUFDRSxDQUFDLE1BQU0sQ0FBQyxVQUFVO1FBQ2xCLENBQUMsTUFBTSxD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