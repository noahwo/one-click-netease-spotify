import minimist from 'minimist';
import { docai } from '../index.js';
import { PROVIDER_LIST } from '../utils/contants.js';
function checkRequiredFields(args) {
    if (!args.output) {
        throw new Error('An outpath path is required');
    }
    if (!PROVIDER_LIST.includes(args.modelProvider)) {
        throw new Error(`Only ${PROVIDER_LIST.join(', ')} llm are supported. Please choose one with modelProvider argument`);
    }
    if (!args.modelName) {
        throw new Error('A modelName is required. Please fill modelName argument');
    }
    if (!args.entrypoint && !args.serverless) {
        throw new Error('You have to pass an entrypoint or a serverless path or a files array');
    }
}
export async function cli(cliArgs) {
    if (!process.env.API_KEY) {
        throw new Error('You have to provide an API_KEY');
    }
    const args = minimist(cliArgs);
    checkRequiredFields(args);
    await docai({
        outputDir: args.output,
        isMocked: Boolean(args.mocked),
        baseDir: args.basedir ?? '',
        llm: {
            temperature: args.temperature,
            modelName: args.modelName,
            modelProvider: args.modelProvider,
            apiKey: process.env.API_KEY
        },
        files: [],
        entryPoint: args.entrypoint,
        serverlessEntryPoint: args.serverless,
        deleteTmpFolder: !args.noDeleteTmp,
        tmpFolderPath: args.tmpDirPath ?? ''
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaS9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFBO0FBQy9CLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFFbkMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBR3BELFNBQVMsbUJBQW1CLENBQUMsSUFBZTtJQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUE7S0FDL0M7SUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FDYixRQUFRLGFBQWEsQ0FBQyxJQUFJLENBQ3hCLElBQUksQ0FDTCxtRUFBbUUsQ0FDckUsQ0FBQTtLQUNGO0lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFBO0tBQzNFO0lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0VBQXNFLENBQ3ZFLENBQUE7S0FDRjtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBQyxPQUFpQjtJQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO0tBQ2xEO0lBRUQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBcUIsQ0FBQTtJQUVsRCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV6QixNQUFNLEtBQUssQ0FBQztRQUNWLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTTtRQUN0QixRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDOUIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRTtRQUMzQixHQUFHLEVBQUU7WUFDSCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBZ0M7WUFDcEQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTztTQUM1QjtRQUNELEtBQUssRUFBRSxFQUFFO1FBQ1QsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1FBQzNCLG9CQUFvQixFQUFFLElBQUksQ0FBQyxVQUFVO1FBQ3JDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXO1FBQ2xDLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUU7S0FDckMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyJ9