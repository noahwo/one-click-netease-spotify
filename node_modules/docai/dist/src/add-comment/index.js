import dependencyTree from 'dependency-tree';
import fs from 'fs';
import path from 'path';
import { moveFileToDirectory } from '../utils/file.js';
import { generateDescriptionByFile } from './generate-descriptions.js';
import { addDescriptionsToImports } from './add-descriptions.js';
import { orderFilesByDeepestDependencies } from './order-files.js';
import { getPathAndDescription } from './get-path-and-description.js';
export async function addCommentsPerFile(entryPoint, config) {
    const { tmpPath, descriptions } = getPathAndDescription(config);
    const directory = path.dirname(entryPoint);
    const tree = dependencyTree({
        filename: entryPoint,
        directory
    });
    const reverseTree = await moveFileToDirectory(orderFilesByDeepestDependencies(tree), tmpPath, config.baseDir);
    const filesToAddDoc = await Promise.all(reverseTree.map(async (filePath) => await generateDescriptionByFile(filePath, descriptions)()));
    for (const { fileContent, filePath } of filesToAddDoc) {
        const codeWithComments = addDescriptionsToImports(fileContent, filePath, descriptions);
        fs.writeFileSync(filePath, codeWithComments);
    }
    return tmpPath;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWRkLWNvbW1lbnQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxjQUFjLE1BQU0saUJBQWlCLENBQUE7QUFDNUMsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFBO0FBQ25CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUV2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUN0RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN0RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNoRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUNsRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUdyRSxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUN0QyxVQUFrQixFQUNsQixNQUFjO0lBRWQsTUFBTSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUUvRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzFDLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQztRQUMxQixRQUFRLEVBQUUsVUFBVTtRQUNwQixTQUFTO0tBQ1YsQ0FBQyxDQUFBO0lBRUYsTUFBTSxXQUFXLEdBQUcsTUFBTSxtQkFBbUIsQ0FDM0MsK0JBQStCLENBQUMsSUFBSSxDQUFDLEVBQ3JDLE9BQU8sRUFDUCxNQUFNLENBQUMsT0FBTyxDQUNmLENBQUE7SUFFRCxNQUFNLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ3JDLFdBQVcsQ0FBQyxHQUFHLENBQ2IsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQ2pCLE1BQU0seUJBQXlCLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQzVELENBQ0YsQ0FBQTtJQUVELEtBQUssTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxhQUFhLEVBQUU7UUFDckQsTUFBTSxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FDL0MsV0FBVyxFQUNYLFFBQVEsRUFDUixZQUFZLENBQ2IsQ0FBQTtRQUVELEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUE7S0FDN0M7SUFFRCxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDIn0=