import path from 'path';
import { parse } from '@babel/parser';
import _generator from '@babel/generator';
import _traverse from '@babel/traverse';
import * as babelT from '@babel/types';
import { getExtensionFile } from '../utils/file.js';
// Made for jest to work, Fixed by babel 8 https://github.com/babel/babel/issues/13855
// _traverse.default work for tsc, _traverse for jest
const traverse = _traverse.default ?? _traverse;
const generator = _generator.default ?? _generator;
export function addDescriptionsToImports(fileToParse, filePath, descriptions) {
    const ast = parse(fileToParse, {
        sourceType: 'module',
        plugins: ['typescript']
    });
    traverse(ast, {
        // On ajoute le commentaire dans les requires correspondant aux fichiers déjà parsées
        CallExpression(pathTree) {
            if (babelT.isIdentifier(pathTree.node.callee) &&
                pathTree.node.callee.name === 'require' &&
                babelT.isStringLiteral(pathTree.node.arguments[0]) &&
                pathTree.node.arguments[0].value.includes('.')) {
                const requirePath = pathTree.node.arguments[0].value;
                const absoluteRequirePath = getExtensionFile(path.resolve(path.dirname(filePath), requirePath));
                pathTree.addComment('trailing', descriptions[absoluteRequirePath]);
            }
        },
        ImportDeclaration(pathTree) {
            if (babelT.isStringLiteral(pathTree.node.source) &&
                pathTree.node.source.value.includes('.')) {
                const importPath = pathTree.node.source.value;
                const absoluteImportPath = getExtensionFile(path.resolve(path.dirname(filePath), importPath));
                pathTree.addComment('trailing', descriptions[absoluteImportPath]);
            }
        }
    });
    return generator(ast, {}, fileToParse).code;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWRlc2NyaXB0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGQtY29tbWVudC9hZGQtZGVzY3JpcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQ3JDLE9BQU8sVUFBVSxNQUFNLGtCQUFrQixDQUFBO0FBQ3pDLE9BQU8sU0FBUyxNQUFNLGlCQUFpQixDQUFBO0FBRXZDLE9BQU8sS0FBSyxNQUFNLE1BQU0sY0FBYyxDQUFBO0FBRXRDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBTW5ELHNGQUFzRjtBQUN0RixxREFBcUQ7QUFFckQsTUFBTSxRQUFRLEdBQUksU0FBZ0MsQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFBO0FBQ3ZFLE1BQU0sU0FBUyxHQUFJLFVBQWtDLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQTtBQUUzRSxNQUFNLFVBQVUsd0JBQXdCLENBQ3RDLFdBQW1CLEVBQ25CLFFBQWdCLEVBQ2hCLFlBQW9DO0lBRXBDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUU7UUFDN0IsVUFBVSxFQUFFLFFBQVE7UUFDcEIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO0tBQ3hCLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDWixxRkFBcUY7UUFDckYsY0FBYyxDQUFDLFFBQXlDO1lBQ3RELElBQ0UsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDekMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVM7Z0JBQ3ZDLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQzlDO2dCQUNBLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtnQkFFcEQsTUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FDMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUNsRCxDQUFBO2dCQUVELFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUE7YUFDbkU7UUFDSCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsUUFBNEM7WUFDNUQsSUFDRSxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUN4QztnQkFDQSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7Z0JBQzdDLE1BQU0sa0JBQWtCLEdBQUcsZ0JBQWdCLENBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FDakQsQ0FBQTtnQkFFRCxRQUFRLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFBO2FBQ2xFO1FBQ0gsQ0FBQztLQUNGLENBQUMsQ0FBQTtJQUVGLE9BQU8sU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQzdDLENBQUMifQ==